From: Jason Dillaman <dillaman@redhat.com>
Date: Sun, 4 Sep 2016 10:48:48 -0400
Subject: librbd: potential double-unwatch of watch handle upon error

Fixes: http://tracker.ceph.com/issues/17210
Signed-off-by: Jason Dillaman <dillaman@redhat.com>
(cherry picked from commit 1068ded0cba59831a0712f347946731689a68553)
(cherry picked from commit 8ffeba7cd82ab6d5fbe250ee7d5705ca9e4b2dd2)

Resolves: rhbz#1379837
---
 src/librbd/ImageWatcher.cc | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/librbd/ImageWatcher.cc b/src/librbd/ImageWatcher.cc
index 4ede224..7b118bf 100644
--- a/src/librbd/ImageWatcher.cc
+++ b/src/librbd/ImageWatcher.cc
@@ -147,7 +147,8 @@ void ImageWatcher<I>::unregister_watch(Context *on_finish) {
 
     gather_ctx = new C_Gather(m_image_ctx.cct, create_async_context_callback(
       m_image_ctx, on_finish));
-    if (m_watch_state == WATCH_STATE_REGISTERED) {
+    if (m_watch_state == WATCH_STATE_REGISTERED ||
+        m_watch_state == WATCH_STATE_ERROR) {
       m_watch_state = WATCH_STATE_UNREGISTERED;
 
       librados::AioCompletion *aio_comp = create_rados_safe_callback(
@@ -155,8 +156,6 @@ void ImageWatcher<I>::unregister_watch(Context *on_finish) {
       int r = m_image_ctx.md_ctx.aio_unwatch(m_watch_handle, aio_comp);
       assert(r == 0);
       aio_comp->release();
-    } else if (m_watch_state == WATCH_STATE_ERROR) {
-      m_watch_state = WATCH_STATE_UNREGISTERED;
     }
   }
 
@@ -1013,7 +1012,6 @@ void ImageWatcher<I>::handle_error(uint64_t handle, int err) {
 
   RWLock::WLocker l(m_watch_lock);
   if (m_watch_state == WATCH_STATE_REGISTERED) {
-    m_image_ctx.md_ctx.unwatch2(m_watch_handle);
     m_watch_state = WATCH_STATE_ERROR;
 
     FunctionContext *ctx = new FunctionContext(
@@ -1053,7 +1051,9 @@ void ImageWatcher<I>::handle_rewatch(int r) {
 
   WatchState next_watch_state = WATCH_STATE_REGISTERED;
   if (r < 0) {
-    next_watch_state = WATCH_STATE_ERROR;
+    // only EBLACKLISTED or ENOENT can be returned
+    assert(r == -EBLACKLISTED || r == -ENOENT);
+    next_watch_state = WATCH_STATE_UNREGISTERED;
   }
 
   Context *unregister_watch_ctx = nullptr;
