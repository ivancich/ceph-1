From: Brad Hubbard <bhubbard@redhat.com>
Date: Tue, 10 Jan 2017 17:08:51 +1000
Subject: common: Remove the runtime dependency on lsb_release

With modern releases we should be able to make do with the call to
os_release_parse only. This allows us to remove the runtime dependency on
lsb_release and, in turn, its dependencies.

common/util: add support for distro info from /etc/os-release file

test/cephtool-test-mon.sh tests osd metadata for distro info.

Updated collect_sys_info() to detect distro info in /etc/os-release as a fallback to lsb_release.

Added unit test for distro info detection.

Signed-off-by: Brad Hubbard <bhubbard@redhat.com>
(cherry picked from commit 8b1a57fd34cdc28ae688dcdf73fe70443e0463ac)
(cherry picked from commit a9487e2ad09546f8cd06a371cfed9e4ba992c679)

Resolves: rhbz#1380177

For RH Ceph Storage, we have to drop the lsb-release removal in
debian/control, since that directory is not part of the upstream
ceph-10.2.5.tar.gz.
---
 ceph.spec.in                 |  4 ---
 src/common/util.cc           | 77 +++++++++++++++++++++++++++++---------------
 src/test/common/test_util.cc | 15 +++++++++
 3 files changed, 66 insertions(+), 30 deletions(-)

diff --git a/ceph.spec.in b/ceph.spec.in
index d1e3311..1a8450b 100644
--- a/ceph.spec.in
+++ b/ceph.spec.in
@@ -216,12 +216,8 @@ Requires:      cryptsetup
 Requires:      findutils
 Requires:      which
 %if 0%{?suse_version}
-Requires:      lsb-release
 Recommends:    ntp-daemon
 %endif
-%if 0%{?fedora} || 0%{?rhel}
-Requires:      redhat-lsb-core
-%endif
 %if 0%{with xio}
 Requires:      libxio
 %endif
diff --git a/src/common/util.cc b/src/common/util.cc
index 2c60cb2..ee4b84e8 100644
--- a/src/common/util.cc
+++ b/src/common/util.cc
@@ -115,47 +115,72 @@ int get_fs_stats(ceph_data_stats_t &stats, const char *path)
   return 0;
 }
 
-static bool lsb_release_set(char *buf, const char *prefix,
+static char* value_sanitize(char *value)
+{
+  while (isspace(*value) || *value == '"')
+    value++;
+
+  char* end = value + strlen(value) - 1;
+  while (end > value && (isspace(*end) || *end == '"'))
+    end--;
+
+  *(end + 1) = '\0';
+
+  return value;
+}
+
+static bool value_set(char *buf, const char *prefix,
 			    map<string, string> *pm, const char *key)
 {
   if (strncmp(buf, prefix, strlen(prefix))) {
     return false;
   }
 
-  if (buf[strlen(buf)-1] == '\n')
-    buf[strlen(buf)-1] = '\0';
-
-  char *value = buf + strlen(prefix) + 1;
-  (*pm)[key] = value;
+  (*pm)[key] = value_sanitize(buf + strlen(prefix));
   return true;
 }
 
-static void lsb_release_parse(map<string, string> *m, CephContext *cct)
+static void file_values_parse(const map<string, string>& kvm, FILE *fp, map<string, string> *m, CephContext *cct) {
+  char buf[512];
+  while (fgets(buf, sizeof(buf) - 1, fp) != NULL) {
+    for (auto& kv : kvm) {
+      if (value_set(buf, kv.second.c_str(), m, kv.first.c_str()))
+        continue;
+    }
+  }
+}
+
+static bool os_release_parse(map<string, string> *m, CephContext *cct)
 {
-  FILE *fp = popen("lsb_release -idrc", "r");
+  static const map<string, string> kvm = {
+    { "distro", "ID=" },
+    { "distro_description", "PRETTY_NAME=" },
+    { "distro_version", "VERSION_ID=" }
+  };
+
+  FILE *fp = fopen("/etc/os-release", "r");
   if (!fp) {
     int ret = -errno;
-    lderr(cct) << "lsb_release_parse - failed to call lsb_release binary with error: " << cpp_strerror(ret) << dendl;
-    return;
+    lderr(cct) << "os_release_parse - failed to open /etc/os-release: " << cpp_strerror(ret) << dendl;
+    return false;
   }
 
-  char buf[512];
-  while (fgets(buf, sizeof(buf) - 1, fp) != NULL) {
-    if (lsb_release_set(buf, "Distributor ID:", m, "distro"))
-      continue;
-    if (lsb_release_set(buf, "Description:", m, "distro_description"))
-      continue;
-    if (lsb_release_set(buf, "Release:", m, "distro_version"))
-      continue;
-    if (lsb_release_set(buf, "Codename:", m, "distro_codename"))
-      continue;
-
-    lderr(cct) << "unhandled output: " << buf << dendl;
+  file_values_parse(kvm, fp, m, cct);
+
+  fclose(fp);
+
+  return true;
+}
+
+static void distro_detect(map<string, string> *m, CephContext *cct)
+{
+  if (!os_release_parse(m, cct)) {
+    lderr(cct) << "distro_detect - /etc/os-release is required" << dendl;
   }
 
-  if (pclose(fp)) {
-    int ret = -errno;
-    lderr(cct) << "lsb_release_parse - pclose failed: " << cpp_strerror(ret) << dendl;
+  for (const char* rk: {"distro", "distro_version"}) {
+    if (m->find(rk) == m->end())
+      lderr(cct) << "distro_detect - can't detect " << rk << dendl;
   }
 }
 
@@ -218,7 +243,7 @@ void collect_sys_info(map<string, string> *m, CephContext *cct)
   }
 
   // distro info
-  lsb_release_parse(m, cct);
+  distro_detect(m, cct);
 }
 
 void dump_services(Formatter* f, const map<string, list<int> >& services, const char* type)
diff --git a/src/test/common/test_util.cc b/src/test/common/test_util.cc
index cb22047..2ea40b3 100644
--- a/src/test/common/test_util.cc
+++ b/src/test/common/test_util.cc
@@ -12,6 +12,7 @@
  *
  */
 
+#include "common/ceph_context.h"
 #include "include/util.h"
 #include "gtest/gtest.h"
 
@@ -30,3 +31,17 @@ TEST(util, unit_to_bytesize)
 
   ASSERT_EQ(65536ll, unit_to_bytesize(" 64K", &cerr));
 }
+
+TEST(util, collect_sys_info)
+{
+  map<string, string> sys_info;
+
+  CephContext *cct = (new CephContext(CEPH_ENTITY_TYPE_CLIENT))->get();
+  collect_sys_info(&sys_info, cct);
+
+  ASSERT_TRUE(sys_info.find("distro") != sys_info.end());
+  ASSERT_TRUE(sys_info.find("distro_version") != sys_info.end());
+  ASSERT_TRUE(sys_info.find("distro_description") != sys_info.end());
+
+  cct->put();
+}
