From: Jason Dillaman <dillaman@redhat.com>
Date: Wed, 15 Jun 2016 23:04:48 -0400
Subject: rbd-mirror: keep local pointer to image journal

Fixes: http://tracker.ceph.com/issues/16230
Signed-off-by: Jason Dillaman <dillaman@redhat.com>

Resolves: rhbz#1349983
---
 src/tools/rbd_mirror/ImageReplayer.cc | 23 ++++++++++++++++++-----
 src/tools/rbd_mirror/ImageReplayer.h  |  3 +++
 2 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/src/tools/rbd_mirror/ImageReplayer.cc b/src/tools/rbd_mirror/ImageReplayer.cc
index 0172373..8b5a27a 100644
--- a/src/tools/rbd_mirror/ImageReplayer.cc
+++ b/src/tools/rbd_mirror/ImageReplayer.cc
@@ -465,9 +465,20 @@ template <typename I>
 void ImageReplayer<I>::start_replay() {
   dout(20) << dendl;
 
-  Context *ctx = create_context_callback<
-    ImageReplayer, &ImageReplayer<I>::handle_start_replay>(this);
-  m_local_image_ctx->journal->start_external_replay(&m_local_replay, ctx);
+  assert(m_local_journal == nullptr);
+  {
+    RWLock::RLocker snap_locker(m_local_image_ctx->snap_lock);
+    if (m_local_image_ctx->journal != nullptr) {
+      m_local_journal = m_local_image_ctx->journal;
+
+      Context *ctx = create_context_callback<
+        ImageReplayer, &ImageReplayer<I>::handle_start_replay>(this);
+      m_local_journal->start_external_replay(&m_local_replay, ctx);
+      return;
+    }
+  }
+
+  on_start_fail(-EINVAL, "error starting journal replay");
 }
 
 template <typename I>
@@ -475,6 +486,7 @@ void ImageReplayer<I>::handle_start_replay(int r) {
   dout(20) << "r=" << r << dendl;
 
   if (r < 0) {
+    m_local_journal = nullptr;
     derr << "error starting external replay on local image "
 	 <<  m_local_image_id << ": " << cpp_strerror(r) << dendl;
     on_start_fail(r, "error starting replay on local image");
@@ -866,7 +878,7 @@ void ImageReplayer<I>::allocate_local_tag() {
 
   Context *ctx = create_context_callback<
     ImageReplayer, &ImageReplayer<I>::handle_allocate_local_tag>(this);
-  m_local_image_ctx->journal->allocate_tag(
+  m_local_journal->allocate_tag(
     mirror_uuid, predecessor_mirror_uuid,
     m_replay_tag_data.predecessor_commit_valid,
     m_replay_tag_data.predecessor_tag_tid,
@@ -1192,7 +1204,8 @@ void ImageReplayer<I>::shut_down(int r, Context *on_start) {
         if (r < 0) {
           derr << "error flushing journal replay: " << cpp_strerror(r) << dendl;
         }
-        m_local_image_ctx->journal->stop_external_replay();
+        m_local_journal->stop_external_replay();
+        m_local_journal = nullptr;
         m_local_replay = nullptr;
         ctx->complete(0);
       });
diff --git a/src/tools/rbd_mirror/ImageReplayer.h b/src/tools/rbd_mirror/ImageReplayer.h
index 6b0f993..1a81df6 100644
--- a/src/tools/rbd_mirror/ImageReplayer.h
+++ b/src/tools/rbd_mirror/ImageReplayer.h
@@ -15,6 +15,7 @@
 #include "cls/journal/cls_journal_types.h"
 #include "cls/rbd/cls_rbd_types.h"
 #include "journal/ReplayEntry.h"
+#include "librbd/ImageCtx.h"
 #include "librbd/journal/Types.h"
 #include "librbd/journal/TypeTraits.h"
 #include "ProgressContext.h"
@@ -231,6 +232,8 @@ private:
     nullptr;
   librados::IoCtx m_local_ioctx, m_remote_ioctx;
   ImageCtxT *m_local_image_ctx = nullptr;
+
+  decltype(ImageCtxT::journal) m_local_journal = nullptr;
   librbd::journal::Replay<ImageCtxT> *m_local_replay = nullptr;
   Journaler* m_remote_journaler = nullptr;
   ::journal::ReplayHandler *m_replay_handler = nullptr;
