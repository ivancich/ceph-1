From: Jason Dillaman <dillaman@redhat.com>
Date: Wed, 17 Aug 2016 12:08:37 -0400
Subject: librbd: cache was not switching to writeback after first flush

Fixes: http://tracker.ceph.com/issues/16654
Signed-off-by: Jason Dillaman <dillaman@redhat.com>
(cherry picked from commit 2d9840af39555ce00246b50e4a5c186798bd88ff)

Conflicts:
	src/librbd/AioImageRequest.cc: trivial resolution

Resolves: rhbz#1367891
---
 src/librbd/AioImageRequest.cc          | 2 ++
 src/test/librbd/journal/test_Replay.cc | 6 ++++++
 src/test/librbd/mock/MockImageCtx.h    | 1 +
 3 files changed, 9 insertions(+)

diff --git a/src/librbd/AioImageRequest.cc b/src/librbd/AioImageRequest.cc
index 1877af1..f6cbc42 100644
--- a/src/librbd/AioImageRequest.cc
+++ b/src/librbd/AioImageRequest.cc
@@ -447,6 +447,8 @@ void AioImageDiscard::update_stats(size_t length) {
 }
 
 void AioImageFlush::send_request() {
+  m_image_ctx.user_flushed();
+
   bool journaling = false;
   {
     RWLock::RLocker snap_locker(m_image_ctx.snap_lock);
diff --git a/src/test/librbd/journal/test_Replay.cc b/src/test/librbd/journal/test_Replay.cc
index 037006e..e25ac2b 100644
--- a/src/test/librbd/journal/test_Replay.cc
+++ b/src/test/librbd/journal/test_Replay.cc
@@ -708,6 +708,12 @@ TEST_F(TestJournalReplay, ObjectPosition) {
   ASSERT_EQ(0, aio_comp->wait_for_complete());
   aio_comp->release();
 
+  {
+    // user flush requests are ignored when journaling + cache are enabled
+    RWLock::RLocker owner_lock(ictx->owner_lock);
+    ictx->flush();
+  }
+
   // check the commit position updated
   get_journal_commit_position(ictx, &current_tag, &current_entry);
   ASSERT_EQ(initial_tag + 1, current_tag);
diff --git a/src/test/librbd/mock/MockImageCtx.h b/src/test/librbd/mock/MockImageCtx.h
index b7b73c83..7e32872 100644
--- a/src/test/librbd/mock/MockImageCtx.h
+++ b/src/test/librbd/mock/MockImageCtx.h
@@ -144,6 +144,7 @@ struct MockImageCtx {
                               uint8_t protection_status, uint64_t flags));
   MOCK_METHOD2(rm_snap, void(std::string in_snap_name, librados::snap_t id));
 
+  MOCK_METHOD0(user_flushed, void());
   MOCK_METHOD1(flush, void(Context *));
   MOCK_METHOD1(flush_copyup, void(Context *));
 
