From: Matt Benjamin <mbenjamin@redhat.com>
Date: Sat, 11 Feb 2017 16:38:05 -0500
Subject: rgw_file:  add refcount dout traces at debuglevel 17

These are helpful for checking RGWFileHandle refcnt invariants.

Signed-off-by: Matt Benjamin <mbenjamin@redhat.com>
(cherry picked from commit 462034e17f919fb783ee33e2c9fa8089f93fd97d)

resolves (in part): rhbz#1420231, rhbz#1416041, rhbz#1415981
---
 src/rgw/rgw_file.cc | 11 +++++++++--
 src/rgw/rgw_file.h  | 10 ++++++++++
 2 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/src/rgw/rgw_file.cc b/src/rgw/rgw_file.cc
index 32e6fc2..22c6ff9 100644
--- a/src/rgw/rgw_file.cc
+++ b/src/rgw/rgw_file.cc
@@ -711,7 +711,7 @@ namespace rgw {
     const auto& fhk = rgw_fh.get_key();
     const auto& fh = const_cast<RGWFileHandle&>(rgw_fh).get_fh();
     os << "<RGWFileHandle:";
-    os << "addr=" << &rgw_fh;
+    os << "addr=" << &rgw_fh << ";";
     switch (fh->fh_type) {
     case RGW_FS_TYPE_DIRECTORY:
 	os << "type=DIRECTORY;";
@@ -764,6 +764,9 @@ namespace rgw {
   } /* RGWFileHandle::decode_attrs */
 
   bool RGWFileHandle::reclaim() {
+    lsubdout(fs->get_context(), rgw, 17)
+      << __func__ << " " << *this
+      << dendl;
     fs->fh_cache.remove(fh.fh_hk.object, this, cohort::lru::FLAG_NONE);
     return true;
   } /* RGWFileHandle::reclaim */
@@ -1385,8 +1388,12 @@ int rgw_fh_rele(struct rgw_fs *rgw_fs, struct rgw_file_handle *fh,
 {
   RGWLibFS *fs = static_cast<RGWLibFS*>(rgw_fs->fs_private);
   RGWFileHandle* rgw_fh = get_rgwfh(fh);
-  fs->unref(rgw_fh);
 
+  lsubdout(fs->get_context(), rgw, 17)
+    << __func__ << " " << *rgw_fh
+    << dendl;
+
+  fs->unref(rgw_fh);
   return 0;
 }
 
diff --git a/src/rgw/rgw_file.h b/src/rgw/rgw_file.h
index 1048748..4d29e17 100644
--- a/src/rgw/rgw_file.h
+++ b/src/rgw/rgw_file.h
@@ -886,6 +886,11 @@ namespace rgw {
       }
       lat.lock->unlock(); /* !LATCHED */
       get<0>(fhr) = fh;
+      if (fh) {
+	    lsubdout(get_context(), rgw, 17)
+	      << __func__ << " 1 " << *fh
+	      << dendl;
+      }
       return fhr;
     } /* lookup_fh(const fh_key&) */
 
@@ -965,6 +970,11 @@ namespace rgw {
       lat.lock->unlock(); /* !LATCHED */
     out:
       get<0>(fhr) = fh;
+      if (fh) {
+	    lsubdout(get_context(), rgw, 17)
+	      << __func__ << " 2 " << *fh
+	      << dendl;
+      }
       return fhr;
     } /*  lookup_fh(RGWFileHandle*, const char *, const uint32_t) */
 
